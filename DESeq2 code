library(BiocManager)
library(tximport)
library(rhdf5)
library(DESeq2)
library(plotly)
library(biomaRt)
library(pheatmap)
library(RColorBrewer)
library(clusterProfiler)
library(org.Hs.eg.db)
library(magrittr)
library(dplyr)
library(readr)
library(ggplot2)
library(tibble)

setwd("F:/CAST/X204SC20122967-Z01-F003_3/X204SC20122967-Z01-F003_3/rawdata/kallisto_output")

list.files()

#create table
sample_table = read.csv("sampleData2.txt")
sample_table

sample_files = paste0(pull(sample_table, 'sample_names'), '/abundance.h5')
sample_files

names(sample_files) = pull(sample_table, 'sample_names')

#tximport commands from kallisto files
count_data=tximport(files = sample_files, type = "kallisto", txOut = TRUE)

#summarise count data to visualise
count_data[['counts']]

#organise sample table for DESeq2
sample_table = as.data.frame(sample_table)
colnames(sample_table) [1] = 'sample'
conditions = c('T47D_CAST_TYPE1', 'Control')
conditions = rep(conditions, each=3)
conditions = factor(conditions)
sample_table$conditions = conditions
sample_table

DESeq_dataset = DESeqDataSetFromTximport(txi=count_data, colData=sample_table, design=~conditions)
counts(DESeq_dataset)
count_data$counts[1:6, 1:6]
counts(DESeq_dataset) [1:6, 1:6]

normalizationFactors(DESeq_dataset)
DESeq_dataset = estimateSizeFactors(DESeq_dataset)
DESeq_dataset

counts(DESeq_dataset, normalized=TRUE) [1:6, 1:6]
boxplot(counts(DESeq_dataset, normalized=TRUE))

#principal components analysis
vst= varianceStabilizingTransformation(DESeq_dataset)
boxplot(assay(vst))
plotPCA(vst, intgroup="conditions")

#unsupervised hierarchical clustering (euclidean)
d = (assay(vst))
d = t(d)
d = dist(d)
h = hclust(d)
plot(h)

#supervised kmeans (split data into groups (centres))
k=kmeans(t(assay(vst)), centers=2)
k$cluster

DESeq_dataset = estimateDispersions(DESeq_dataset)
plotDispEsts(DESeq_dataset)

DESeq_dataset = nbinomWaldTest(DESeq_dataset)
results(DESeq_dataset)

results_table = results(DESeq_dataset)
summary(results_table)

#if haven't set levels then its alphabetical interpretation

head(results_table)
View(as.data.frame(results_table))

#DESeq_dataset <-DESeq(DESeq_dataset)
#results_table = results(DESeq_dataset)
#summary(results_table) 

#result table is a DataFrame not a data.frame!
result_df = as.data.frame(results_table)
View(result_df)

#baseMean mean accross all experiments
#log2FoldChange log 2 fold change in expression
#lfcSE standard error around lfc2
#stat Wald test statistic
#pvalue p value for wald test statistic
#padj adjusted P value for multiple testing

#remove filtered (N/A) results
sum(complete.cases(result_df))
filter_df1 = result_df[complete.cases(result_df),]
View(filter_df1)

#filter results
#padj <0.05
#log2FoldChange >1 <-1

filter_df1$padj <0.05
filter_df2 = filter_df1 [filter_df1$padj <0.05,]
dim(filter_df2)

filter_df3 = filter_df2[abs(filter_df2$log2FoldChange) >1,]
dim(filter_df3)
filter_df3

#visualise results
plotMA(results_table)
# look at mean normalised counts vs log fold change
#shows high level of variance at low counts
#significant less than <0.1 are shown, and usually high counts
#tend to have a larger fold change so further away from 0 line

#visualise using a volcano plot
filter_df1$test = filter_df1$padj <0.05 & abs(filter_df1$log2FoldChange) >1
filter_df1
ggplot(filter_df1, aes(x=log2FoldChange, y=-log10(padj))) +
  geom_point(aes(colour=test), size=1, alpha=0.3) +
  scale_colour_manual(values=c('black', 'red')) +
  geom_vline(xintercept=1, colour='green', linetype=3) +
  geom_vline(xintercept=-1, colour='green', linetype=3) +
  geom_hline(yintercept=-log10(0.05), colour='blue', linetype=3)+
  xlim(-15, 15)+
  ylim(-0, 500)+
  theme_bw()+
  theme(legend.position='none')

#can look at expression of any gene
plotCounts(DESeq_dataset, gene= 'ENST00000305031.5', intgroup='conditions')
plotCounts(DESeq_dataset, gene= 'ENST00000395566.8', intgroup='conditions')
plotCounts(DESeq_dataset, gene= 'ENST00000675179.1', intgroup='conditions')
plotCounts(DESeq_dataset, gene= 'ENST00000395812.6', intgroup='conditions')
